apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'signing'

sourceCompatibility = 1.8
targetCompatibility = 1.8
group = "org.vcsreader"
version = "1.0.0"

repositories {
    mavenLocal()
    mavenCentral()
//    maven { url 'lib' } // has to be commented out before publishing to central.sonatype
}

dependencies {
    compile "org.jetbrains:annotations:15.0"
    compile "com.googlecode.juniversalchardet:juniversalchardet:1.0.3"
	testCompile "org.hamcrest:hamcrest-all:1.3"
    testCompile "junit:junit:4.11"
    testCompile "org.codehaus.groovy:groovy-all:2.4.6"
    testCompile "org.mockito:mockito-core:1.10.19"
}

sourceSets {
    main {
        java { srcDir "src/main" }
    }
    test {
        java { srcDir "src/test" }
        groovy { srcDir "src/test" }
    }
}

//
// Configuration for publishing vcsreader to central.sonatype.
// See http://central.sonatype.org/pages/gradle.html
//
archivesBaseName = "vcsreader"
task javadocWithLinks(type: Javadoc) {
	options {
		links = ["."]
	}
}
task javadocJar(type: Jar) {
	classifier = 'javadoc'
	from javadocWithLinks
}
task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allSource
}
artifacts {
	archives javadocJar, sourcesJar
}
signing {
	sign configurations.archives
}
uploadArchives {
	repositories {
		mavenDeployer {
			beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

			repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
				authentication(userName: ossrhUsername, password: ossrhPassword)
			}
			snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
				authentication(userName: ossrhUsername, password: ossrhPassword)
			}

			pom.project {
				name 'VCS Reader'
				packaging 'jar'
				description 'Minimal Java library for reading VCS commits (git, hg, svn)'
				url 'http://vcsreader.org'

				scm {
					connection 'scm:git:https://github.com/dkandalov/vcs-reader.git'
					developerConnection 'scm:git:https://github.com/dkandalov/vcs-reader.git'
					url 'https://github.com/dkandalov/vcs-reader.git'
				}
				licenses {
					license {
						name 'The Apache License, Version 2.0'
						url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
					}
				}
				developers {
					developer {
						id 'dkandalov'
						name 'Dmitry Kandalov'
						email 'dmitry.kandalov@gmail.com'
					}
				}
			}
		}
	}
}


//
// Task for downloading all dependencies to 'lib' folder so that project could be built completely offline.
//
task downloadMavenDependencies() << {
    copyAllMavenDependenciesTo("lib", [configurations.compile, configurations.testCompile])
}

def copyMavenDependenciesTo(String targetDirPath, Configuration configuration) {
    Collection<File> files = configuration.files
    def allDependencies = allDependenciesOf(configuration.resolvedConfiguration)

    def dependenciesInfo = allDependencies.collect { ResolvedDependency dependency ->
        def relativePath = (dependency.moduleGroup.split("\\.") + [dependency.moduleName, dependency.moduleVersion]).join(File.separator)
        [path: relativePath, fileName: dependency.moduleName + "-" + dependency.moduleVersion + ".jar"]
    }
    if (!files.collect{it.name}.containsAll(dependenciesInfo.collect{it.fileName})) {
        throw new IllegalStateException(
                "Expected files to contain all dependencies. But was\n" +
                        "files:\n${files.join("\n")}\n" +
                        "dependencies:\n${dependenciesInfo.join("\n")}"
        )
    }

    dependenciesInfo.each { dependencyInfo ->
        def file = files.find { it.name == dependencyInfo.fileName }
        def dir = new File(targetDirPath + File.separator + dependencyInfo.path)
        dir.mkdirs()
        new groovy.util.AntBuilder().copy(
                file: file.canonicalPath,
                todir: dir.canonicalPath
        )
    }
}
def copyAllMavenDependenciesTo(String targetDirPath, Collection<Configuration> configurations) {
    ant.delete(dir: targetDirPath)
    for (Configuration configuration : configurations) {
        copyMavenDependenciesTo(targetDirPath, configuration)
    }
}
def allDependenciesOf(ResolvedConfiguration configuration) {
    configuration.firstLevelModuleDependencies.collectMany { allDependenciesOf(it) }
}
def allDependenciesOf(ResolvedDependency dependency, Set result = []) {
    if (result.containsAll(dependency.children)) [dependency]
    else [dependency] + dependency.children.collectMany{ child -> allDependenciesOf(child) }
}