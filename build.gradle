apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'maven'

group = "codehistoryminer"
version = "1.0"

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'lib' }
}

dependencies {
    compile "com.intellij:annotations:12.0"
    compile "com.googlecode.juniversalchardet:juniversalchardet:1.0.3"
	testCompile "org.hamcrest:hamcrest-all:1.3"
    testCompile "junit:junit:4.11"
    testCompile "org.codehaus.groovy:groovy-all:2.3.9"
    testCompile "org.mockito:mockito-core:1.10.19"
}

sourceSets {
    main {
        java { srcDir "src/main" }
    }
    test {
        java { srcDir "src/test" }
        groovy { srcDir "src/test" }
    }
}

task downloadMavenDependencies() << {
    copyAllMavenDependenciesTo("lib", [configurations.compile, configurations.testCompile])
}

def copyMavenDependenciesTo(String targetDirPath, Configuration configuration) {
    Collection<File> files = configuration.files
    def allDependencies = allDependenciesOf(configuration.resolvedConfiguration)

    def dependenciesInfo = allDependencies.collect { ResolvedDependency dependency ->
        def relativePath = (dependency.moduleGroup.split("\\.") + [dependency.moduleName, dependency.moduleVersion]).join(File.separator)
        [path: relativePath, fileName: dependency.moduleName + "-" + dependency.moduleVersion + ".jar"]
    }
    if (!files.collect{it.name}.containsAll(dependenciesInfo.collect{it.fileName})) {
        throw new IllegalStateException(
                "Expected files to contain all dependencies. But was\n" +
                        "files:\n${files.join("\n")}\n" +
                        "dependencies:\n${dependenciesInfo.join("\n")}"
        )
    }

    dependenciesInfo.each { dependencyInfo ->
        def file = files.find { it.name == dependencyInfo.fileName }
        def dir = new File(targetDirPath + File.separator + dependencyInfo.path)
        dir.mkdirs()
        new groovy.util.AntBuilder().copy(
                file: file.canonicalPath,
                todir: dir.canonicalPath
        )
    }
}
def copyAllMavenDependenciesTo(String targetDirPath, Collection<Configuration> configurations) {
    ant.delete(dir: targetDirPath)
    for (Configuration configuration : configurations) {
        copyMavenDependenciesTo(targetDirPath, configuration)
    }
}
def allDependenciesOf(ResolvedConfiguration configuration) {
    configuration.firstLevelModuleDependencies.collectMany { allDependenciesOf(it) }
}
def allDependenciesOf(ResolvedDependency dependency, Set result = []) {
    if (result.containsAll(dependency.children)) [dependency]
    else [dependency] + dependency.children.collectMany{ child -> allDependenciesOf(child) }
}